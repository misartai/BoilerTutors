{"ast":null,"code":"var _jsxFileName = \"/Users/shivliagrawal/Desktop/boilertutors/BoilerTutors/NEW WEBSITE/frontend/src/components/NewPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewPassword() {\n  _s();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const location = useLocation();\n  const email = new URLSearchParams(location.search).get('email');\n\n  // Password complexity regex\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate password complexity\n    if (!passwordRegex.test(password)) {\n      setError('Password must contain at least 8 characters, 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character.');\n      return;\n    }\n\n    // Check if passwords match\n    if (password !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n    try {\n      const response = await axios.post('/api/auth/reset-password', {\n        email,\n        password\n      });\n\n      // Check for account pending message from the server\n      const {\n        token,\n        validAccount\n      } = response.data;\n\n      // Save the new token in localStorage\n      localStorage.setItem('token', token);\n      if (validAccount === false) {\n        setMessage('Password reset successful. Redirecting...');\n        setTimeout(() => {\n          navigate('/pending-approval'); // Redirect to a \"Pending Approval\" page\n        }, 1300); // Wait for 1 seconds before redirecting\n      } else {\n        setMessage('Password reset successful. Redirecting...');\n        setTimeout(() => {\n          navigate('/dashboard'); // Redirect to a \"Pending Approval\" page\n        }, 1300);\n      }\n    } catch (err) {\n      setError('Failed to reset password. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Enter new password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Confirm new password\",\n      value: confirmPassword,\n      onChange: e => setConfirmPassword(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(NewPassword, \"g8fchQwgK7TCch8bsOWX7/nU93k=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = NewPassword;\nexport default NewPassword;\nvar _c;\n$RefreshReg$(_c, \"NewPassword\");","map":{"version":3,"names":["React","useState","axios","useNavigate","useLocation","jsxDEV","_jsxDEV","NewPassword","_s","password","setPassword","confirmPassword","setConfirmPassword","error","setError","message","setMessage","navigate","location","email","URLSearchParams","search","get","passwordRegex","handleSubmit","e","preventDefault","test","response","post","token","validAccount","data","localStorage","setItem","setTimeout","err","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","className","_c","$RefreshReg$"],"sources":["/Users/shivliagrawal/Desktop/boilertutors/BoilerTutors/NEW WEBSITE/frontend/src/components/NewPassword.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nfunction NewPassword() {\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const location = useLocation();\n  const email = new URLSearchParams(location.search).get('email');\n\n  // Password complexity regex\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Validate password complexity\n    if (!passwordRegex.test(password)) {\n      setError('Password must contain at least 8 characters, 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character.');\n      return;\n    }\n\n    // Check if passwords match\n    if (password !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n\n    try {\n      const response = await axios.post('/api/auth/reset-password', { email, password });\n\n        // Check for account pending message from the server\n        const { token , validAccount } = response.data;\n\n        // Save the new token in localStorage\n        localStorage.setItem('token', token);\n\n        if (validAccount === false) {\n            setMessage('Password reset successful. Redirecting...');\n            setTimeout(() => {\n                navigate('/pending-approval');  // Redirect to a \"Pending Approval\" page\n            }, 1300);  // Wait for 1 seconds before redirecting\n          } else {\n            setMessage('Password reset successful. Redirecting...');\n            setTimeout(() => {\n                navigate('/dashboard');  // Redirect to a \"Pending Approval\" page\n            }, 1300)\n        }\n\n    } catch (err) {\n        setError('Failed to reset password. Please try again.');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Reset Password</h2>\n      <input\n        type=\"password\"\n        placeholder=\"Enter new password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        required\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Confirm new password\"\n        value={confirmPassword}\n        onChange={(e) => setConfirmPassword(e.target.value)}\n        required\n      />\n      <button type=\"submit\">Submit</button>\n      {message && <p className=\"message\">{message}</p>}\n      {error && <p className=\"error\">{error}</p>}\n    </form>\n  );\n}\n\nexport default NewPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}